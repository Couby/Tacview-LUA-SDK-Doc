[
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-core-interface/",
	"title": "LUA Core Interface",
	"tags": [],
	"description": "",
	"content": " Tacview 1.7.6 Lua Core Interface Last update: 2019-02-27 Tacview will automatically load any Lua script named \u0026ldquo;main.lua\u0026rdquo; found in the immediate sub-folders of:\nC:\\Program Files (x86)\\Tacview\\AddOns\\ %ProgramData%\\Tacview\\AddOns\\ %APPDATA%\\Tacview\\AddOns\\  For example you could store your addon main script as:\n%ProgramData%\\Tacview\\AddOns\\My add-on\\main.lua  At the beginning of your script you will typically retrieve the available Lua interface for which your add-on has been programmed:\nTacview = require(\u0026quot;Tacview176\u0026quot;) -- Request Tacview 1.7.6 API  Then you can access any of the following methods like the following:\nTacview.Log.Info(\u0026quot;Successfully exported \u0026quot;, objectCount, \u0026quot; object(s)\u0026quot;)  Depending on the context your script is executed in, you will have access to slightly different interfaces. Your main.lua script will be executed in the main context. It will be granted access to all Tacview features but export and import interfaces. While your import and export scripts will be granted access to the core features as well as respectively import or export interfaces. To prevent multithreading issues as well as errors breaking other add-ons, each Lua add-on is loaded in its own virtual machine.\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-main-interface/",
	"title": "LUA Main Interface",
	"tags": [],
	"description": "",
	"content": " Tacview 1.7.6 Lua General Interface Last update: 2019-02-06 The following features are available to general Lua modules in addition of the core features listed in Tacview Lua Core Interface.. Data importers and exporters DO NOT have access to any of the following features.\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-core-interface/global-functions/",
	"title": "Global functions",
	"tags": [],
	"description": "",
	"content": " Close() Tacview 1.7.2\nUnconditionally closes the application.\nNOTE: this function does not ask the user to save his work.\n\r"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-core-interface/settings/",
	"title": "Settings",
	"tags": [],
	"description": "",
	"content": " This interface is provided to access Tacview configuration. If you want to save and load settings for your own addon, see AddOns.Current.Settings\nSettings.SetBoolean( settingPath, newBooleanValue ) Tacview 1.7.2\nSave a Boolean setting under the given name.\nsettingPath can be one of the following:\n \u0026quot;UI.View.Grid.Visible\u0026quot; \u0026ndash; Enable/disable latitude/longitude grid \u0026quot;UI.View.HUD.Visible\u0026quot; \u0026ndash; Enable/disable cockpit head-up-display \u0026quot;UI.View.Overlay.Visible\u0026quot; \u0026ndash; Enable/disable all the informations displayed on top of the 3D view  Settings.GetBoolean( settingFullPath ) Tacview 1.7.2\nReturns the current setting value or nil if the provided path does not point to a boolean setting. See Settings.SetBoolean for the possible values of settingFullPath.\nReturn value: corresponding setting boolean value.\n\rSettings.SetString( settingFullPath , newStringValue ) Tacview 1.7.2\nSave a string setting under the given name.\nsettingFullPath and newStringValue can be one of the following:\n \u0026quot;UI.View.Terrain.Mode\u0026quot; \u0026ndash; Change the way the terrain is displayed in the 3D view \u0026quot;Empty\u0026quot; \u0026quot;Flat\u0026quot; \u0026quot;3D\u0026quot; \u0026quot;Full3D\u0026quot;  Settings.GetString( settingFullPath ) Tacview 1.7.2\nReturns the current setting value or nil if the provided path does not point to a string setting. See Settings.SetString for the possible values of settingFullPath.\nReturn value: corresponding setting string value.\n\r"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-core-interface/addons/",
	"title": "Add Ons",
	"tags": [],
	"description": "",
	"content": " The add-ons interface is mainly used to specify information about your add-on.\nYour addon settings will be saved and restored at the next session of Tacview.\nAddOns.Current.GetPath() Tacview 1.7.4\nRetrieve the current addon root path.\nThis is typically where your addon dll or lua file is stored.\nThis function is useful to access and load your custom resources without hardcoding a path to them.\nReturn value:\nAddOn path (e.g. C:\\ProgramData\\Tacview\\AddOns\\Tutorial 1 - Hello World - CS\\)\nor nil if not applicable (typically for lua code injected over a pipe)\n\rAddOns.Current.SetTitle( addOnTitle ) Tacview 1.7.2\nDefines a user friendly-name in place of the folder name which is displayed by default in Tacview UI.\nAddOns.Current.SetVersion( textVersionNumber ) Tacview 1.7.2\nIt is recommended to declare the version of your add-on using this function.\nThat way, it will be easier for the end-user to know if it\u0026rsquo;s time to download an updated version of it.\nAddOns.Current.SetAuthor( authorName ) Tacview 1.7.2\nLet everyone know who is the author of this brilliant add-on!\nAddOns.Current.SetNotes( textNotes ) Tacview 1.7.2\nDefines a text which will be displayed in Tacview status bar when your addon is selected in the addons menu.\nA dedicated window will be available in Tacview 2.\nAddOns.Current.Settings.SetBoolean( settingName , newBooleanValue ) Tacview 1.7.2\nSave a Boolean setting under the given name.\nAddOns.Current.Settings.GetBoolean( settingName , defaultBooleanValue ) Tacview 1.7.2\nReturns the current setting value, or the default provided one if no value was previously saved.\nReturn value: corresponding setting boolean value.\n\r"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-core-interface/log/",
	"title": "Log",
	"tags": [],
	"description": "",
	"content": " The log module is typically used to log messages and errors which can be used to diagnose specific issues.\nAll strings sent to the log will also be saved in the %TEMP%\\Tacview.log file.\nPlease, use the log wisely and try to display only meaningful messages to the end-user.\nDo not spam the log with internal development messages, this may confuse the user who is looking for more relevant status from other modules.\nLog.Debug(\u0026hellip;) Tacview 1.7.2\nUse this method to help you trace and diagnose problems with your addon.\nNOTE: Debug information will be displayed only when using the /Debug:On command line argument.\n\rLog.Info(\u0026hellip;) Tacview 1.7.2\nThis method can be used to display specific information related to your addon which might be useful to the end-user.\nNOTE: Lua print() function is redirected to Log.Info().\n\rLog.Warning(\u0026hellip;) Tacview 1.7.2\nWarnings can be used to notify the user of unusual circumstances like non-critical errors in input data. Warnings will be highlighted in Tacview console to attract the user attention.\nLog.Error(\u0026hellip;) Tacview 1.7.2\nError messages are typically used to display critical errors which usually prevent further operation.\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-core-interface/ui.messagebox/",
	"title": "UI.MessageBox",
	"tags": [],
	"description": "",
	"content": " Message boxes can be used to display modal notifications and ask for simple questions to the user.\nIt is suggested to not use too many message boxes as they are breaking the productivity flow of the user.\nWhenever possible, you can use the log to output most of you messages and rely on settings to choose the appropriate behavior depending on the circumstances.\nUI.MessageBox.Info( textMessage ) Tacview 1.7.2\nUI.MessageBox.Error( textMessage ) Tacview 1.7.2\nDisplays a modal notification to inform or warn the user.\nUI.MessageBox.Question( textMessage ) Tacview 1.7.2\nDisplays a question.\nReturn value:\nOne of the following constants:\n- UI.MessageBox.OK\n- UI.MessageBox.Cancel\n\r"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-core-interface/math/",
	"title": "Math",
	"tags": [],
	"description": "",
	"content": " This module contains all the necessary tools to convert and modify typical telemetry data.\nHere, we are calling vectors, tables with three components:\n{ x = number, y = number, z = number, }  Math.Angle.Subtract( leftAngle , rightAngle ) Tacview 1.7.2\nSubstracts two radian angles.\nReturn value:\nDifference between leftAngle and rightAngle.\nThe result is normalized to [-pi, +pi].\n\rMath.Vector.LongitudeLatitudeToCartesian( {longitude = number , latitude = number , altitude = number} ) Tacview 1.7.2\nConverts Earth spherical coordinates into cartesian coordinates. It is possible to direcly give an object transform to this function, see Telemetry.GetCurrentTransform.\nLongitude and latitude are in radian. Altitude is in meter.\nReturn value:\nA vector which is a the cartesian position in global Earth space.\n\rMath.Vector.CartesianToLongitudeLatitude( {x = number , y = number , z = number} ) Tacview 1.7.5\nConverts cartesian coordinates into Earth spherical coordinates.\nReturn value:\nA table which contains the { longitude = \u0026hellip; , latitude = \u0026hellip; , altitude = \u0026hellip;}\nLongitude and latitude are in radian.\nAltitude is in meter.\n\rMath.Vector.Add( vector1 , vector2 ) Tacview 1.7.2\nAdds two 3D vectors.\nReturn value:\nA vector wich is the sum of vector1 and vector2.\n\rMath.Vector.Subtract( vector1 , vector2 ) Tacview 1.7.2\nSubstracts two 3D vectors.\nReturn value:\nA vector which is the difference between vector1 and vector2.\n\rMath.Vector.Multiply( factor , vector ) Tacview 1.7.5\nMultiplies a scalar value by a specified vector.\nReturn value:\nScaled vector.\n\rMath.Vector.Normalize( vector ) Tacview 1.7.2\nNormalize the given vector.\nReturn value:\nNormalized vector.\nThis function is safe and a nul vector is the vector is nul.\n\rMath.Vector.AngleBetween( vector1 , vector2 ) Tacview 1.7.2\nCalculate the angle between two normalized vectors. DO NOT forget to normalize the vectors before calling GetAngle!\n\rNOTE: If you want an accurate quadran calculation, you may want to use the function with three parameters.\n\rReturn value:\nAngle in radian between the two given vectors.\nWhich corresponds to ArcCos( DotProduct( vector1, vector2 ) )\n\rMath.Vector.AngleBetween( vector , referenceVector1 , referenceVector2 ) Tacview 1.7.2\nCalculate the angle between using two normalized vectors. DO NOT forget to normalize the vectors before calling GetAngle!\n\rUnlike AngleBetween( vector1 , vector2 ), this function gives the correct quadran.\nReturn value:\nAngle in radian between the two given vectors.\nWhich corresponds to ArcTan( DotProduct( vector, referenceVector1 ), DotProduct( vector, referenceVector2 ) )\n\rMath.Vector.LocalToGlobal( objectTransform , localCoordinates ) Tacview 1.7.2\nConverts the given point from an object local coordinates into Earth cartesian coordinates.\nYou can direcly pass to this function, the objectTransform table coming from Telemetry.GetCurrentTransform() where localCoordinates is a vector.\nobjectTransform = { -- If xyz are not specified, they will be calculated from longitude, latitude, and altitude. x = cartesianPositionX, -- meters y = cartesianPositionY, -- meters z = cartesianPositionZ, -- meters -- If either longitude or latitude is not specified, they will be calculated from xyz. longitude = sphericalLongitude, -- radian latitude = sphericalLatitude, -- radian altitude = absoluteAltitude, -- (meters) required only if xyz are not specified roll = objectRoll, -- radian pitch = objectPitch, -- radian yaw = objectYaw, -- radian }  Return value:\ncoordinates as a vector in Earth global cartesian space.\nreturns nil if not enough data is provided.\n\r"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-core-interface/context/",
	"title": "Context",
	"tags": [],
	"description": "",
	"content": " This contains all the information relative the telemetry representation on screen. NOTE: See Lua Main Interface for additional functions.\n\rContext.GetAbsoluteTime() Tacview 1.7.5\nRetrieves the current telemetry time in seconds since 1970-01-01 (this parameter is useful to talk with the Telemetry module).\nContext.SetAbsoluteTime( absoluteTime ) Tacview 1.7.6\nSet current telemetry time for data playback in seconds since 1970-01-01.\nNOTE: DO NOT force the time at every frame, especially during real-time telemetry recording.\nThis would conflict with Tacview internal time update leading to 3D view stutter.\n\rIf you want to synchronize Tacview time with an external tool, you should do so only when there is a important delta-time between both tools:\n-- Resynchronize Tacview time only if there is more than one second difference with the external tool if math.abs(Context.GetAbsoluteTime() - externalToolTime) \u0026gt; 1.0 then Context.SetAbsoluteTime(externalToolTime) end  "
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-core-interface/telemetry/",
	"title": "Telemetry",
	"tags": [],
	"description": "",
	"content": " This module is the heart of Tacview.\nUse the telemetry manager to read and write any data for any dynamic object.\nTelemetry.BeginningOfTime Tacview 1.7.5\nTelemetry.EndOfTime Tacview 1.7.5\nConstants used to specify special time stamps.\nBeginningOfTime is typically used to create timeless objects like waypoints or buildings.\nTelemetry.InvalidPropertyIndex Tacview 1.7.5\nConstant used to detect invalid properties.\nTelemetry.Tags Tacview 1.7.3\nEnumeration of bits used to defined object types.\n -- Basic Type Telemetry.Tags.FixedWing Telemetry.Tags.Rotorcraft Telemetry.Tags.Armor Telemetry.Tags.AntiAircraft Telemetry.Tags.Vehicle Telemetry.Tags.Watercraft Telemetry.Tags.Human Telemetry.Tags.Biologic Telemetry.Tags.Missile Telemetry.Tags.Rocket Telemetry.Tags.Bomb Telemetry.Tags.Torpedo Telemetry.Tags.Projectile Telemetry.Tags.Beam Telemetry.Tags.Decoy Telemetry.Tags.Building Telemetry.Tags.Bullseye Telemetry.Tags.Waypoint  Telemetry.Property Tacview 1.7.6\nList of the names of the properties natively supported by Tacview.\n -- Text properties Telemetry.Property.Text.Callsign Telemetry.Property.Text.Event Telemetry.Property.Text.Name -- Numeric properties Telemetry.Property.Numeric.Disabled Telemetry.Property.Numeric.EngagementRange  Telemetry.Clear() Tacview 1.7.2\nPurge all telemetry data currently loaded in memory.\nThis function does not warn the user, nor it gives him the opportunity to save any data.\nThis function does not interrupt or stop any recording in progress. It simply purges all the data recorded up to that point.\nTelemetry.IsEmpty() Tacview 1.7.6\nTells if no at all telemetry is currently loaded in memory.\nThis include intemporal data.\nTelemetry.IsLikeEmpty() Tacview 1.7.6\nTells if no significant telemetry is currently loaded in memory.\nFor example, if no data or only intemporal data is loaded this function returns true.\nOtherwise it returns false.\nTelemetry.GetDataTimeRange() Tacview 1.7.6\nRetrieve the extend of the telemetry data currently loaded in memory.\nThis excludes any intemporal samples like bullseyes position for example.\nReturn value:\n{\nbeginTime, \u0026ndash; first sample absolute time\nendTime \u0026ndash; last sample absolute time\n}\n\rTelemetry.GetCurrentObjectHandle( objectId ) Tacview 1.7.2\nRetrieves the handle of the specified object at the current update time.\nIf there are several objects with the same id (for example a player which has spawned in the same aircraft multiple time during the same session), the telemetry manager will return the object which is the most appropriate for the current time frame.\nUnlike Ids, objects handles uniquely identify each object currently loaded in memory.\nReturn value:\nobjectHandle (integer)\n\rTelemetry.GetCurrentOrCreateObjectHandle( objectId ) Tacview 1.7.5\nRetrieves the handle of the specified object at the current update time.\nIf the give object id is not found, then a new object will be created at the current update time with the given id.\nUnlike Ids, objects handles uniquely identify each object currently loaded in memory.\nReturn value:\nobjectHandle (integer)\n\rTelemetry.GetOrCreateObjectHandle( objectId , absoluteTime ) Tacview 1.7.5\nRetrieves the handle of the specified object at the specified time.\nIf the given object id is not found, then a new object will be created at the specified time with the given id.\nUnlike Ids, objects handles uniquely identify each object currently loaded in memory.\nTo create a timeless object like a waypoint, you can use the following: local newObjectHandle = Tacview.Telemetry.GetOrCreateObjectHandle( objectId , Tacview.Telemetry.BeginningOfTime )\nReturn value:\nobjectHandle (integer)\n\rTelemetry.GetCurrentTags( objectHandle ) Tacview 1.7.3\nReturn given object tags as a bit field.\nReturn value:\nEach bit of the returned integer corresponds to a specific tag.\nThe combination of these tags defines the current object type.\nThe object type can evolve over time and be refined depending on available telemetry at this point.\n\rTelemetry.GetCurrentShortName( objectHandle ) Tacview 1.7.2\nReturn given object short name at the current update time.\nReturn value:\nText which typically correspond to the NATO code or any other appropriate short designation for the object.\n\rTelemetry.GetTransform( objectHandle , absoluteTime ) Tacview 1.7.5\nTelemetry.GetCurrentTransform( objectHandle ) Tacview 1.7.2\nReturns given object position/rotation at the current update or specified time.\nSome objects (typically bullets) may not have all the information available.\nFor example, the rotation information may not be available for all aircraft.\nNative coordinates correspond the original coordinates in the source flight simulator (typically for BMS and DCS).\nReturn value:\n\r ObjectTransform = { time = sample_absolute_time, -- (seconds) This effective absolute time of this sample may be different from current update time if the object does not exist yet, or anymore... x = cartesianPositionX, -- (meters) Cartesian position (ALWAYS AVAILABLE) y = cartesianPositionY, -- (meters) Cartesian position (ALWAYS AVAILABLE) z = cartesianPositionZ, -- (meters) Cartesian position (ALWAYS AVAILABLE) longitude = sphericalLongitude, -- (radian) Spherical position (ALWAYS AVAILABLE) latitude = sphericalLatitude, -- (radian) Spherical position (ALWAYS AVAILABLE) altitude = absoluteAltitude, -- (meters) Spherical position (ALWAYS AVAILABLE) roll = objectRoll, -- (radian) roll axis rotation (if rotationIsValid == true) pitch = objectPitch, -- (radian) pitch axis rotation (if rotationIsValid == true) yaw = objectYaw, -- (radian) yaw axis rotation (if rotationIsValid == true) u = nativePositionX, -- (meters) Native x coordinate (if nativeCoordinatesAreValid == true) v = nativePositionY, -- (meters) Native y coordinate (if nativeCoordinatesAreValid == true) heading = nativeHeadingToNorth, -- (radian) Heading in native coordinates system (if nativeCoordinatesAreValid == true \u0026amp; rotationIsValid == true) rotationIsValid = boolean, -- Set to true if rotation information is valid (otherwise the data may be emulated) nativeCoordinatesAreValid = boolean, -- Set to true if native coordinates are valid (otherwise u, v and heading are set to zero) }  Return value:\nvalue , validity\nvalidity is set to false if the value does not really apply for the given time (typically if the object does not exist at the given time) event when validity is set to false, the value is valid and usable (this simplify the client code)\n\rTelemetry.GetCurrentVerticalGForce( objectHandle ) Tacview 1.7.3\nReturns given object vertical G-Force if available at current time.\nIf vertical G-Force has been recorded, then Tacview will return the interpolated sample.\nIf vertical G-Force has not been recorded, but rotation data is available, Tacview will calculate the vertical G-Force.\nReturn value:\nVertical G-Force if available.\nnil when not enough data is available (or object does not exist at this time).\n\rTelemetry.GetGlobalNumericPropertyIndex( propertyName , autoCreate ) Tacview 1.7.6\nTelemetry.GetGlobalTextPropertyIndex( propertyName , autoCreate ) Tacview 1.7.6\nRetrieve a property for the global object (0).\nIf the property does not exist yet:\n if autoCreate is true, then the property will be created and its index returned. if autoCreate is false, then Telemetry.InvalidPropertyIndex will be returned.  To optimize CPU and memory, numeric and text properties are separate in the telemetry manager.\nWARNING: Because numeric and text properties are separate, indexes for numeric and text samples may overlap and cannot be mixed.\n\rTelemetry.GetObjectsNumericPropertyIndex( propertyName , autoCreate ) Tacview 1.7.5\nTelemetry.GetObjectsTextPropertyIndex( propertyName , autoCreate ) Tacview 1.7.5\nRetrieve a property index for everything which is not the global object.\nThe index returned is the same for all objects.\nIf the property does not exist yet:\n if autoCreate is true, then the property will be created and its index returned. if autoCreate is false, then Telemetry.InvalidPropertyIndex will be returned.  To optimize CPU and memory, numeric and text properties are separate in the telemetry manager.\nWARNING: Because numeric and text properties are separate, indexes for numeric and text samples may overlap and cannot be mixed.\n\rTelemetry.GetNumericSample( objectHandle , absoluteTime , propertyIndex ) Tacview 1.7.5\nTelemetry.GetTextSample( objectHandle , absoluteTime , propertyIndex ) Tacview 1.7.5\nRetrieve property numeric or text value at the given time.\nReturn value:\nvalue , validity\nvalidity is set to false if the value does not really apply for the given time (typically if the object does not exist at the given time) event when validity is set to false, the value is valid and usable (this simplify the client code)\n\rTelemetry.SetNumericSample( objectHandle , absoluteTime , propertyIndex , value ) Tacview 1.7.5\nTelemetry.SetTextSample( objectHandle , absoluteTime , propertyIndex , value ) Tacview 1.7.5\nSet or re-set given numeric or text property value at the given time.\nYou can set absoluteTime to Tacview.Telemetry.BeginningOfTime to declare the properties of timeless objects like waypoints.\nTelemetry.SetTransform( objectHandle , absoluteTime , transform ) Tacview 1.7.5\nSet or re-set object position and rotation at the given time.\nabsoluteTime is a 64-bit floating point number which represents the number of seconds elapsed to 1970-01-01T00:00:00Z\nInjected angles (including longitude and latitude) MUST be normalized between ]-pi,+pi]\nFailure to do so may produce undefined results with some formulas.\nFor performance reasons, angles retrieved by the telemetry manager are NOT always normalized between ]-pi,+pi]\nDo not forget to normalize angles before displaying then as text to the final user!\n\u0026ndash; non specified members will be set to the interpolated value of the preceding and following samples.\ntransform { -- Spherical position f64 longitude; -- (radian) Spherical position (+ is towards east) f64 latitude; -- (radian) Spherical position (+ is towards north) f32 altitude; -- (meters) Spherical position -- Rotation f32 roll; -- (radian) roll axis rotation f32 pitch; -- (radian) pitch axis rotation f32 yaw; -- (radian) yaw axis rotation -- Native coordinates, mostly used to get accurate distance and speed calculation for flat world simulators. f32 u; -- (meters) Native x coordinate f32 v; -- (meters) Native y coordinate f32 heading; -- (radian) Heading in native coordinates system };  Telemetry.GetLifeTime( objectHandle ) Tacview 1.7.6\nReturn absolute time of the object first appearance and its time of disappearance if applicable.\nReturn value:\nlifeTimeBegin, lifeTimeEnd\n\rIf the object exists from the beginning of times (e.g. a bullseye) its lifeTimeBegin is Telemetry.BeginningOfTime.\nIf the object has never been destroyed or removed from the battlefield, then lifeTimeEnd is Telemetry.EndOfTime.\nTelemetry.SetLifeTimeEnd( objectHandle , absoluteTime ) Tacview 1.7.5\nDefines the end-of-life of the specified object.\nTypically used to specify when an object has been destroyed or has been removed from the battlefield.\nTelemetry.DeleteObject( objectHandle ) Tacview 1.7.5\nRemove the specified object from the telemetry manager.\nThis operation is safe: The corresponding handle will remain valid until the next effective purge (typically when loading a new telemetry file) so the other modules will not crash if they attempt to reference the object afterward.\nHowever, any data related to this object will be freed.\nTelemetry.GetObjectCount() Tacview 1.7.6\nRetrieve the total number of objects currently active in the telemetry manager.\nTypically used to enumerate all objects.\nTelemetry.GetObjectHandleByIndex( index ) Tacview 1.7.6\nRetrieve an object by its index. NOTE: The index goes from 0 to GetObjectCount() - 1.\n\rReturn value:\nThe object handle or nil if the index is out of range.\n\rTelemetry.GetObjectId( objectHandle ) Tacview 1.7.6\nRetrieve given object id.\nBeware that object ids can be recycled and cannot uniquely identify objects.\nFor that reason, avoid using them, unless it is for telemetry injection (event creation) or export.\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-core-interface/terrain/",
	"title": "Terrain",
	"tags": [],
	"description": "",
	"content": " The following functions can be used to customize the terrain as well as to retrieve some information about it.\nTerrain.GetElevation( longitude , latitude ) Tacview 1.7.5\nRetrieve given point elevation in meter. Longitude and latitude are in radian.\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-main-interface/ui/",
	"title": "UI",
	"tags": [],
	"description": "",
	"content": " General functions to manipulate Tacview UI and aspect.\nUI.EnterFullScreen() Tacview 1.7.2\nUI.ExitFullScreen() Tacview 1.7.2\nEnter/exit full screen mode.\nWhen switched to full screen, Tacview displays only the 3D view in a borderless window.\nThis can be useful during an online debriefing, so the user can fully focus his attention on the objects displayed in the 3D view.\nThe user can manually switch between full screen and windowed mode by pressing [ALT] + [ENTER].\nIt is also possible to exit the full screen mode by pressing [Esc].\nUI.EnterReadMode( [borderless] ) Tacview 1.7.2\nUI.ExitReadMode() Tacview 1.7.2\nEnter/exit read-mode.\nIn read-mode Tacview displays only the 3D view (tools and menus are hidden).\nborderless is an optional boolean parameter which can be set to true if you also want to hide Tacview window border.\nThis function is mainly to integrate Tacview window in another application when combined with UI.SetWindowParent().\nUI.SetWindowParent( parentWindowhandle ) Tacview 1.7.2\nAttach Tacview main window to another application window.\nTypically used with UI.EnterReadMode(true) and UI.SetWindowPosition() to display Tacview inside another application.\nCall SetWindowParent(nil) to detach Tacview main window from your application.\nUI.SetWindowPosition( x , y [, width , height] ) Tacview 1.7.2\nChange Tacview main window position and size when width and heigh are provided.\nPosition is specified for the top/left corner of the window on the desktop, or in its parent window.\nUI.SetWindowSize( width , height ) Tacview 1.7.2\nChange Tacview main window size.\nwidth and height must be \u0026gt; 0.\nUI.GetWindowHandle() Tacview 1.7.5\nReturns Tacview main window handle.\nYou can use this function to create child windows or dialog boxes for your add-on.\nDO NOT use this function to manually change Tacview window size, position or parent, in that case, use the dedicated functions which are doing more than just calling the OS.\nReturn value:\nTacview main window handle.\nThis handle may be nil if Tacview is executed in silent mode with the command line.\n\r"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-main-interface/ui.menus/",
	"title": "UI.Menus",
	"tags": [],
	"description": "",
	"content": " The Menu interface is useful to create and insert commands and options in Tacview menus.\nAll new menus will be added to the addons menu.\nTacview will automatically remove menu items of an addon which is unloaded.\nUI.Menus.AddMenu( parentMenuId , textLabel ) Tacview 1.7.2\nCreates and inserts a menu in Tacview menu.\nYou can specify the id of a parent menu, or you can use nil to insert your menu in Tacview addons main menu.\nReturn value:\na menu id (integer) which can be used late to insert sub items or to remove the menu.\n\rUI.Menus.AddCommand( parentMenuId , textLabel , function ) Tacview 1.7.2\nInsert a command in the given menu.\nYou can specify the id of a parent menu, or you can use nil to insert your menu in Tacview addons main menu.\nfunction will be called whenever this very menu command has been clicked.\nReturn value:\na menu id (integer) which can be used late to insert sub items or to remove the menu.\n\rUI.Menus.AddOption( parentMenuId , textLabel , optionBoolean , function ) Tacview 1.7.2\nInsert a command with a tick mark in the given menu.\nIf optionBoolean is true, then a tick mark will be displayed after the command label.\nYou can specify the id of a parent menu, or you can use nil to insert your menu in Tacview addons main menu.\nfunction will be called whenever this menu option has been clicked.\nReturn value:\nMenu id which can later be used to change the option value using UI.Menus.SetOption().\n\rUI.Menus.SetOption( menuId , optionBoolean ) Tacview 1.7.2\nChange the value of a menu option. If optionBoolean is true, then a tick mark will be displayed next to the corresponding command label.\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-main-interface/ui.renderer/",
	"title": "UI.Renderer",
	"tags": [],
	"description": "",
	"content": " The renderer is typically used to display objects in the main 3D view.\nNOTE: Drawing functions can be called only during draw events.\n\rSee Events.* for how to register drawing callbacks.\nUI.Renderer.GetWidth() Tacview 1.7.2\nRetrieve the renderer width in pixels or nil when not in a draw event.\nUI.Renderer.GetHeight() Tacview 1.7.2\nRetrieve the renderer height in pixels or nil when not in a draw event.\nUI.Renderer.LoadTexture( texturePath [, wrapRepeat [, compressed] ] ) Tacview 1.7.3\nUI.Renderer.UnloadTexture( textureHandle ) Tacview 1.7.3\nwrapRepeat = must be set to true if you want the texture to be repeated (default = true)\ncompressed = must be set to true if you want the texture to be compressed (recommended) (default = true)\nLoad png or jpg file and compile it as a texture.\nOnly 24-bit and 32-bit formats are supported.\n32-bit format can be used to draw translucent textures.\nTextures are directly used by UI.Renderer.CreateRenderState\nTextures are indirectly used (in render states) by UI.Renderer.DrawObjectVertexArray and UI.Renderer.DrawUIVertexArray\nTextures are automatically unloaded when the add-on is freed.\nReturn value:\nThe texture handle or nil if the file was not found or invalid.\n\rUI.Renderer.CreateVertexArray( vertexArray ) Tacview 1.7.2\nUI.Renderer.ReleaseVertexArray( vertexArrayHandle ) Tacview 1.7.2\nVertex arrays are a list of 3D points used to display triangle strips, which in turn represent 3D objects on screen.\nVertex arrays are automatically freed when the addon is unloaded.\nTypically:\n You must call once (per 3D object) UI.Renderer.CreateVertexArray() to prepare your vertex array. Then, in your Events.DrawOpaqueObjects() callback, you can use the handle returned by CreateVertexArray() to draw your object using UI.Renderer.DrawVertexArray(). Whenever the vertex array is not required anymore, you can release the associated resource by calling UI.Renderer.ReleaseVertexArray().\nvertexArray = { x, y, z, \u0026hellip; }\n  Return value:\nhandle (interger) of the compiled array or nil if the array is invalid.\n\rUI.Renderer.CreateTextureCoordinateArray( textureCoordinateArray ) Tacview 1.7.3\nUI.Renderer.ReleaseTextureCoordinateArray( textureCoordinateArrayHandle ) Tacview 1.7.3\nTexture coordinate arrays are a list of 2D coordinates used to texture triangle strips.\nThey are automatically freed when the addon is unloaded.\ntextureCoordinateArray = { u, u, ... }  Return value:\nhandle (interger) of the compiled array or nil if the array is invalid.\n\rUI.Renderer.CreateRenderState( renderState ) Tacview 1.7.2\nUI.Renderer.ReleaseRenderState( renderStateHandle ) Tacview 1.7.2\nThe draw state describes constants which will be used for one or many draw calls.\nTypically used to specify a single color for a whole 3D model, as well as a list of textures used during draw operations.\nYou can use at any time UI.Renderer.ReleaseRenderState() to free the resource associated to a previously compiled draw state.\nDraw states are automatically freed when the addon is unloaded.\nrenderState = { -- OPTIONAL color (default to opaque white) -- Opaque red is: 0xff0000ff -- Opaque green is: 0xff00ff00 -- Opaque blue is: 0xffff0000 [color = 32_bit_rgba_color_code,] -- OPTIONAL texture loaded with UI.Renderer.LoadTexture() [texture = textureHandle,] -- OPTIONAL blend-mode (for transparent rendering phases) [ blendMode = Tacview.Renderer.BlendMode.Normal Tacview.Renderer.BlendMode.Additive ] }  Return value:\nhandle (integer) of the compiled state or nil if the array is invalid.\n\rUI.Renderer.DrawObjectVertexArray( transform , renderStateHandle , vertexArrayHandle ) Tacview 1.7.2\nUI.Renderer.DrawObjectVertexArray( transform , renderStateHandle , vertexArrayHandle [, textureCoordinateArrayHandle] ) Tacview 1.7.3\nrenderStateHandle is an integer previously returned by UI.Renderer.CreateRanderState()\nvertexArrayHandle is an integer previously returned by UI.Renderer.CreateVertexArray()\ntextureCoordinateArrayHandle is an optional integer previously returned by UI.Renderer.CreateTextureCoordinateArray()\ntransform = { -- If the cartesian xyz position in the Earth global space is not provided, it will be calculated based on the spherical position (longitude, latitude, altitude). x = number, y = number, z = number, -- If the spherical position is not provided, it will be calculated based on xyz cartesian position. longitude = radian, latitude = radian, altitude = meters, -- Optional rotation info roll = radian, pitch = radian, yaw = radian, -- Optional scale scale = number }  Draw the given 3D model (from a previous call to UI.Renderer.CreateVertexArray) using the given state (from a previous call to UI.Renderer.CreateRenderState) at the given position/rotation/scale in the 3D view.\nState and vertex array must be created only ONCE.\nDO NOT re-declare the state and/or the vertex array at each draw call, this will result in a resource leak.\nUI.Renderer.DrawUIVertexArray( transform , renderStateHandle , vertexArrayHandle ) Tacview 1.7.2\nUI.Renderer.DrawUIVertexArray( transform , renderStateHandle , vertexArrayHandle [, textureCoordinateArrayHandle] ) Tacview 1.7.3\nrenderStateHandle is an integer previously returned by UI.Renderer.CreateRenderState()\nvertexArrayHandle is an integer previously returned by UI.Renderer.CreateVertexArray()\ntextureCoordinateArrayHandle is an optional integer previously returned by UI.Renderer.CreateTextureCoordinateArray()\ntransform = { -- Mandatory screen coordinates x = number, y = number, z = number, -- 0 by default -- Optional orientation roll = radian, pitch = radian, yaw = radian, -- Optional scale scale = number }  During the UI pass, 2D coordinates are like the following:\nUI.Renderer.GetHeight() ^ |transform.Y | | | transform.x +------------------\u0026gt; UI.Renderer.GetWidth() 0,0  Draw the given 2D/3D model (from a previous call to UI.Renderer.CreateVertexArray) using the given state (from a previous call to UI.Renderer.CreateRenderState()) at the given position/rotation/scale on top of the 3D view.\nState and vertex array must be created only ONCE.\nDO NOT re-declare the state and/or the vertex array at each draw call, this will result in a resource leak.\nUI.Renderer.DrawOpaqueObject( objectHandle , transform [, alpha ] ) Tacview 1.7.2\nUI.Renderer.DrawTransparentObject( objectHandle , transform [, alpha ] ) Tacview 1.7.2\nHigh level function to draw the opaque or transparent parts of the corresponding telemetry object in the 3D view.\nThese functions will automatically use the current object shape and color to properly display the 3D model in the 3D view.\nUI.Renderer.DrawOpaqueObject() is typically called in Events.DrawOpaqueObjects callbacks to draw the main object body.\n*UI.Renderer.DrawTransparentObject()** is typically called in Events.DrawTransparentObjects callbacks to draw the remaining transparent parts of objects (e.g. properlters).\ntransform = { -- If the spherical position in not provided, Tacview will use cartesian xyz position in the Earth global space x = number, y = number, z = number, -- Spherical position will be used in priority to render the object longitude = radian, latitude = radian, altitude = meters, -- Optional rotation info roll = radian, pitch = radian, yaw = radian, -- Optional scale scale = number }  You can scale the object or set scale to -1 for automatic scale (depending on user settings)\nYou can force the transparency of the object or set alpha to -1 for automatic (depending on dead/alive status)\nUI.Renderer.Print( transform , renderStateHandle , text ) Tacview 1.7.3\nPrint the given text at the corresponding x,y coordinates.\nShould be used only during 2D transparent UI operations.\nYou can set renderState.blendMode to Tacview.Renderer.BlendMode.Additive to display HUD style text.\ntransform = { -- If the cartesian xyz position in the Earth global space is not provided, it will be calculated based on the spherical position (longitude, latitude, altitude). x = number, y = number, -- Optional scale scale = number }  UI.Renderer.ContextMenu.RegisterListener( function ) Tacview 1.7.6\nUse this function to register a callback to add options to the context menu Tacview will display on right click in the 3D view.\nRight before displaying the 3D view context menu Tacview will call the following function so you can have the opportunity to add custom option:\n function( contextMenuId , objectHandle ) -- **contextMenuId** (integer): Id of the context menu in which you can add options. -- **objectHandle** (integer): object associated to the context menu (0 if no object is related to the menu)  Use UI.Menus functions with parentMenuId set to contextMenuID to add your own options to the context menu according to the selected object.\nThe context menu is volatile and will be automatically destroyed as soon as it will be closed by the user.\nEvery time your callback is called, your options will be added to a brand new menu.\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-main-interface/events/",
	"title": "Events",
	"tags": [],
	"description": "",
	"content": " You can register callbacks for different kind of events in Tacview.\nEvents.Update.RegisterListener( function ) Tacview 1.7.2\nOnce a frame, Tacview will call your function which must match the following signature:\nUpdate( dt , absoluteTime )\n dt is the number of seconds elapsed in real life since the last Update() absoluteTime is the current telemetry time in seconds since 1970-01-01 (this parameter is useful to talk with the Telemetry module)  Events.DrawOpaqueObjects.RegisterListener( function ) Tacview 1.7.2\nEvents.DrawTransparentObjects.RegisterListener( function ) Tacview 1.7.2\nOnce a frame, Tacview will call your function to draw 3D objects in the 3D view.\nThere is one pass for the opaque 3D models and one pass for the transparent models.\nSee UI.Renderer.DrawObjectVertexArray() and UI.Renderer.DrawOpaqueObject() to draw objects in the 3D world.\nEvents.DrawOpaqueUI.RegisterListener( function ) Tacview 1.7.2\nEvents.DrawTransparentUI.RegisterListener( function ) Tacview 1.7.2\nOnce a frame, Tacview will call your function to draw 2D transparent foreground UI on top of the 3D view.\nYou function will not receive any parameter.\nSee UI.Renderer.DrawUIVertexArray() to draw your UI on top of the 3D view.\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-main-interface/context/",
	"title": "Context",
	"tags": [],
	"description": "",
	"content": " This contains all the information relative the telemetry representation on screen.\nNOTE: See Lua Core Interface for additional functions.\n\rContext.GetSelectedObject( objectIndex ) Tacview 1.7.2\nRetrieves the handle of one of the selected objects.\nobjectIndex can be either 0 for the primary object or 1 for the secondary object.\nIt is currently possible to select two objects at the same time.\nContext.SetSelectedObject( objectIndex , objectHandle ) Tacview 1.7.2\nChoose which object is currently selected.\nobjectIndex can be either 0 for the primary object or 1 for the secondary object.\nThe user usually select object(s) to change the camera point-of-view or to define a specific context for some tools.\nTo get an object handle from its telemetry id, use the function Telemetry.GetObjectHandle(id)\nContext.GetActiveObjectList() Tacview 1.7.3\nRetrieve the handles of all currently active (alive) objects at the current playback time.\nThe returned table contains the handles in no specific order.\nReturns an empty table if no objects are currently active.\nReturn value:\n{ objectHandle1 , objectHandle2 , \u0026hellip; }\n\r"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-main-interface/context.camera/",
	"title": "Context.Camera",
	"tags": [],
	"description": "",
	"content": " The camera is used to define the user point-of-view in the 3D window of Tacview.\nContext.Camera.GetMode() Tacview 1.7.2\nReturns the current camera mode.\nReturn value:\nCamera.Cockpit\nCamera.External\nCamera.Satellite\nCamera.Free\n\rContext.Camera.SetOffset( offsetData ) Tacview 1.7.2\nTemporarily offset camera position and rotation.\nThe offset is automatically reset at each new frame when not overridden by an addon.\nThe following components can be specified, all of them are optional:\noffsetData = { lateral = meters_positive_to_the_right , longitudinal = meters_positive_forward , vertical = meters_positive_up , roll = radian , pitch = radian , yaw = radian , }  Context.Camera.SetFieldOfView( radian ) Tacview 1.7.2\nChange the camera vertical field-of-view for one frame.\nThe field-of-view is automatically reset at each new frame when not overridden by an addon.\nThe default field-of-view is 60 degrees.\nNOTE: The field-of-view must be defined in radian.\n\r"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/lua-main-interface/context.playback/",
	"title": "Context.Playback",
	"tags": [],
	"description": "",
	"content": " Functions to control the playback of loaded telemetry data.\nContext.Playback.Play() Tacview 1.7.6\nContext.Playback.Pause() Tacview 1.7.6\nResume / pause playback.\nContext.Playback.IsPlaying() Tacview 1.7.6\nReturns false if the playback is currently paused.\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "Copyright © 2006-2019 Raia Software Inc. All rights reserved.\nTacview application Author : Frantz \u0026ldquo;Vyrtuoz\u0026rdquo; Raia\nLUA SDK documentation by Frantz \u0026ldquo;Vyrtuoz\u0026rdquo; Raia\nLUA SDK documentation french translation by Frédéric \u0026ldquo;Couby Stark\u0026rdquo; Coubard\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Time to get your hands on the brand-new Lua SDK ! 1.7.2 release is a big step forward more customization: I have integrated Lua 5.3.4 in Tacview and started to develop an easy to use API. Now, anyone with some programing skills can create addons to extend existing features and even add new features to Tacview! How to create your own addon?\n Create a sub folder named after your addon in C:\\ProgramData\\Tacview\\AddOns\n Create a file named \u0026ldquo;main.lua\u0026rdquo; in this folder (it will be automatically loaded at Tacview startup). It will look like C:\\ProgramData\\Tacview\\AddOns\\My Addon\\main.lua At the beginning of your script, reference the latest API like the following: local Tacview = require(\u0026quot;Tacview172\u0026quot;) Now you can use any of the features documented in C:\\Program Files (x86)\\Tacview\\AddOns\\Tacview Lua * Interface.txt to create your own addon! LuaSocket 3.0 which has been integrated in Tacview and ready to fulfill all of your connectivity needs! Just reference it as usual: socket = require(\u0026quot;socket\u0026quot;)  Keep in mind that this is a first iteration. While the current API is still relatively limited, new features will be added over the coming releases. Just let me know whatever you need. I will do my best to add more Lua functions, so everyone can develop the addon of your dream.\nHave a look at the samples are available in C:\\Program Files (x86)\\Tacview\\AddOns\\\nThe most notable example is the Landing Signal Officer (currently in development) which (will) displays an LSO view when you select an aircraft carrier as switch to cockpit view. This addon will soon automatically score landing attempts.\n"
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://couby.github.io/Tacview-LUA-SDK-Doc/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]